- title: What will get printed in <code>console.log()</code>?
  solution: io-1
  hints: [JS, var-let-const, use strict]
  code: |
    var x = 1;
    var x = 2;
    console.log(x); // ?

    "use strict"
    let x = 1;
    let x = 2;
    console.log(x); // ?

    "use strict"
    var x = 1;
    var x = 2;
    console.log(x); // ?

- title: Is this statement correct? If yes, what will be the output here?
  solution: io-2
  hints: [JS, ES6, arrow functions]
  code: |
    let bob = a => a + 100;
    console.log(bob(2)); //?

- title: What value will be displayed in the <code>console</code>?
  solution: io-3
  hints: [JS, arrays]
  code: |
    var arr = [];
    arr[0] = 'a';
    arr[1] = 'b';
    arr.foo = 'c';
    console.log(arr.length);

- title: What will happen, if we declare an array using a <code>const</code> and try to change one of its values?
  solution: js-i-o-question-4
  hints: [JS, ES6, const]
  code: |
    const s = [5, 6, 7];
    s[2] = 45;
    console.log(s);

- title: What will be the output here, and how does <code>Object.create()</code> works?
  solution: io-5
  hints: [JS, Object creation in JS]
  video: https://www.youtube.com/watch?v=l8H8A2HlnsQ
  code: |
    var obj = {a: 5};
    var obj2 = Object.create(obj);
    delete obj2.a;
    console.log(obj2.a);    // ?

- title: What will be the output?
  hints: [JS, arrays]
  solution: js-i-o-question-6
  code: |
    let arr = [];
    arr[0] = 'a';
    console.log(arr['0'] === arr[0]);   // true or false

- title: What will be the length of an array?
  solution: io-7
  hints: [JS, arrays]
  code: |
    let arr = [1 , , 3];
    console.log(arr.length);   // ?

- title: What will be the output here, and how does <b>(...)</b> works?
  solution: 
  hints: [JS, ES6, Spread operator]
  code: |
    function sum(x, y, z) {
      return x + y + z;
    }
    const numbers = [1, 2, 3];
    console.log(sum(...numbers));   //?

- title: What will be the output here and why?
  solution: 
  hints: [JS, this]
  code: |
    var hero = {
        _name: 'John Doe',
        getSecretIdentity: function () {
            return this._name;
        }
    };
    var stoleSecretIdentity = hero.getSecretIdentity;
    console.log(stoleSecretIdentity());     // ?
    console.log(hero.getSecretIdentity());      // ?

- title: How does <code>bind()</code> works, and what will be the output here?
  solution: 
  hints: [JS, this, bind()]
  code: |
    var obj = {
        x: 2,
        foo: function () {
            console.log(this.x);
        }
    }

    // using bind()
    var baz = obj.foo.bind({x: 3});
    baz(); 

- title: What will be the output, if we use <code>delete</code> operator to delete an item from an <code>array</code>?
  hints: [JS, delete]
  solution: 
  code: |
    const arr = [10, 20, 30, 40];
    console.log(delete arr[2]);
    console.log(arr);

# - title: 
#   hints:
#   solution: 
#   code: |